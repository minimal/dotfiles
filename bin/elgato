#!/usr/bin/env bb

(require '[babashka.http-client :as http]
         '[cheshire.core :as json]
         '[clojure.tools.cli :refer [parse-opts]]
         '[org.httpkit.server :as server]
         '[clojure.core.async :as async :refer [go]]
         '[clojure.string :as string])

(def url "http://192.168.0.38:9123/elgato/lights")

(def light-state (atom nil))

(defn kelvin->mired [k]
  (int (/ 1000000.0 k)))

(defn mired->kelvin [m]
  (int (/ 1000000.0 m)))

(def cli-options
  [["-t" "--toggle" "Toggle light on/off (client mode)"]
   ["-b" "--brightness VALUE" "Change brightness by VALUE (delta) (client mode)" :parse-fn #(Integer/parseInt %)]
   ["-s" "--set-brightness VALUE" "Set absolute brightness (client mode)" :parse-fn #(Integer/parseInt %)]
   ["-c" "--color-temp VALUE" "Change color temperature by VALUE (delta) (client mode)" :parse-fn #(Integer/parseInt %)]
   ["-T" "--set-temperature VALUE" "Set absolute color temperature (2900-7000 Kelvin) (client mode)" :parse-fn #(Integer/parseInt %)]
   ["-S" "--server" "Run in server mode"]
   ["-p" "--port VALUE" "Port to run the server on" :default 3000 :parse-fn #(Integer/parseInt %)]
   ["-h" "--help" "Show help message"]])

(defn fetch-lights []
  (try
    (let [response (http/get url)
          body (json/parse-string (:body response) true)
          lights (:lights body)]
      (first lights))
    (catch Exception e
      (println "Error fetching lights:" (.getMessage e)))))

(defn toggle-light []
  (if-let [light (fetch-lights)]
    (let [current-state (:on light)
          new-state (if (= current-state 1) 0 1)
          payload (json/generate-string {"numberOfLights" 1
                                         "lights"          [{"on" new-state}]})]
      (try
        (http/put url {:body payload :headers {"Content-Type" "application/json"}})
        (println (str "Light toggled " (if (= new-state 1) "on" "off")))
        (catch Exception e
          (println "Error toggling light:" (.getMessage e)))))
    (println "Failed to fetch light status.")))

(defn change-brightness [delta]
  (if-let [light (fetch-lights)]
    (let [current-brightness (:brightness light)
          new-brightness (max 0 (min 100 (+ current-brightness delta)))
          payload (json/generate-string {"numberOfLights" 1
                                         "lights"          [{"brightness" new-brightness}]})]
      (try
        (http/put url {:body payload :headers {"Content-Type" "application/json"}})
        (println (str "Brightness changed to " new-brightness))
        (catch Exception e
          (println "Error changing brightness:" (.getMessage e)))))
    (println "Failed to fetch light status.")))

(defn set-brightness [value]
  (if-let [light (fetch-lights)]
    (let [new-brightness (max 0 (min 100 value))
          payload (json/generate-string {"numberOfLights" 1
                                         "lights"          [{"brightness" new-brightness}]})]
      (try
        (http/put url {:body payload :headers {"Content-Type" "application/json"}})
        (println (str "Brightness set to " new-brightness))
        (catch Exception e
          (println "Error setting brightness:" (.getMessage e)))))
    (println "Failed to fetch light status.")))

(defn change-temperature [delta]
  (if-let [light (fetch-lights)]
    (let [current-temperature (:temperature light)
          new-temperature (max 143 (min 344 (+ current-temperature delta))) ; Use correct Mired range
          payload (json/generate-string {"numberOfLights" 1
                                         "lights"          [{"temperature" new-temperature}]})]
      (try
        (http/put url {:body payload :headers {"Content-Type" "application/json"}})
        (println (str "Temperature changed to " new-temperature))
        (catch Exception e
          (println "Error changing temperature:" (.getMessage e)))))
    (println "Failed to fetch light status.")))

(defn set-temperature [kelvin-value]
  (if-let [light (fetch-lights)]
    (let [clamped-kelvin (max 2900 (min 7000 kelvin-value))
          mired-value (kelvin->mired clamped-kelvin)
          payload (json/generate-string {"numberOfLights" 1
                                         "lights"          [{"temperature" mired-value}]})]
      (try
        (http/put url {:body payload :headers {"Content-Type" "application/json"}})
        (println (str "Temperature set to " clamped-kelvin " K (" mired-value " Mired)"))
        (catch Exception e
          (println "Error setting temperature:" (.getMessage e)))))
    (println "Failed to fetch light status.")))

;;; Server Functions

(defn update-light-state! []
  (try
    (let [response (http/get url)
          body (json/parse-string (:body response) true)
          lights (:lights body)]
      (swap! light-state (constantly (first lights))))
    (catch Exception e
      (println "Error fetching lights:" (.getMessage e)))))

(defn server-toggle-light []
  (let [current-state (:on @light-state)
        new-state (if (= current-state 1) 0 1)
        payload (json/generate-string {"numberOfLights" 1
                                       "lights"          [{"on" new-state}]})]
    (try
      (http/put url {:body payload :headers {"Content-Type" "application/json"}})
      (swap! light-state assoc :on new-state)
      (println (str "Light toggled " (if (= new-state 1) "on" "off")))
      (catch Exception e
        (println "Error toggling light:" (.getMessage e))))))

(defn server-change-brightness [delta]
  (let [current-brightness (:brightness @light-state)
        new-brightness (max 0 (min 100 (+ current-brightness delta)))
        payload (json/generate-string {"numberOfLights" 1
                                       "lights"          [{"brightness" new-brightness}]})]
    (try
      (http/put url {:body payload :headers {"Content-Type" "application/json"}})
      (swap! light-state assoc :brightness new-brightness)
      (println (str "Brightness changed to " new-brightness))
      (catch Exception e
        (println "Error changing brightness:" (.getMessage e))))))

(defn server-set-brightness [value]
  (let [new-brightness (max 0 (min 100 value))
        payload (json/generate-string {"numberOfLights" 1
                                       "lights"          [{"brightness" new-brightness}]})]
    (try
      (http/put url {:body payload :headers {"Content-Type" "application/json"}})
      (swap! light-state assoc :brightness new-brightness)
      (println (str "Brightness set to " new-brightness))
      (catch Exception e
        (println "Error setting brightness:" (.getMessage e))))))

(defn server-change-temperature [delta]
  (let [current-temperature (:temperature @light-state)
        new-temperature (max 143 (min 344 (+ current-temperature delta)))
        payload (json/generate-string {"numberOfLights" 1
                                       "lights"          [{"temperature" new-temperature}]})]
    (try
      (http/put url {:body payload :headers {"Content-Type" "application/json"}})
      (swap! light-state assoc :temperature new-temperature)
      (println (str "Temperature changed to " new-temperature))
      (catch Exception e
        (println "Error changing temperature:" (.getMessage e))))))

(defn server-set-temperature [kelvin-value]
  (let [clamped-kelvin (max 2900 (min 7000 kelvin-value))
        mired-value (kelvin->mired clamped-kelvin)
        payload (json/generate-string {"numberOfLights" 1
                                       "lights"          [{"temperature" mired-value}]})]
    (try
      (http/put url {:body payload :headers {"Content-Type" "application/json"}})
      (swap! light-state assoc :temperature mired-value)
      (println (str "Temperature set to " clamped-kelvin " K (" mired-value " Mired)"))
      (catch Exception e
        (println "Error setting temperature:" (.getMessage e))))))

;;; Parameter Parsing

(defn parse-query-param [query-string param-name]
  (try
    (if query-string
      (let [param-pair (first (filter #(string/starts-with? % (str param-name "="))
                                      (string/split query-string #"&")))
            param-str (second (string/split param-pair #"="))]
        (if param-str
          (Integer/parseInt param-str)
          nil))
      nil)
    (catch Exception e
      (println "Error parsing query parameter:" (.getMessage e))
      nil)))

;;; HTTP Handlers

(defn get-light-handler [request]
  {:status  200
   :headers {"Content-Type" "application/json"}
   :body    (json/generate-string @light-state)})

(defn toggle-light-handler [request]
  (server-toggle-light)
  {:status 200 :body "Toggled"})

(defn change-brightness-handler [request]
  (println "change-brightness-handler called")
  (if-let [delta (parse-query-param (:query-string request) "delta")]
    (do
      (println "Parsed delta:" delta)
      (server-change-brightness delta)
      {:status 200 :body (str "Brightness changed by " delta)})
    (do
      (println "Missing or invalid delta parameter")
      {:status 400 :body "Missing or invalid delta parameter"}))
  (println "change-brightness-handler completed"))

(defn set-brightness-handler [request]
  (println "set-brightness-handler called")
  (if-let [value (parse-query-param (:query-string request) "value")]
    (do
      (println "Parsed value:" value)
      (server-set-brightness value)
      {:status 200 :body (str "Brightness set to " value)})
    (do
      (println "Missing or invalid value parameter")
      {:status 400 :body "Missing or invalid value parameter"}))
  (println "set-brightness-handler completed"))

(defn change-temperature-handler [request]
  (println "change-temperature-handler called")
  (if-let [delta (parse-query-param (:query-string request) "delta")]
    (do
      (println "Parsed delta:" delta)
      (server-change-temperature delta)
      {:status 200 :body (str "Temperature changed by " delta)})
    (do
      (println "Missing or invalid delta parameter")
      {:status 400 :body "Missing or invalid delta parameter"}))
  (println "change-temperature-handler completed"))

(defn set-temperature-handler [request]
  (println "set-temperature-handler called")
  (if-let [value (parse-query-param (:query-string request) "value")]
    (do
      (println "Parsed value:" value)
      (server-set-temperature value)
      {:status 200 :body (str "Temperature set to " value)})
    (do
      (println "Missing or invalid value parameter")
      {:status 400 :body "Missing or invalid value parameter"}))
  (println "set-temperature-handler completed"))

;;; Routing

(def routes
  {"/lights"           {:get get-light-handler}
   "/lights/toggle"    {:post toggle-light-handler}
   "/lights/brightness/change" {:post change-brightness-handler}
   "/lights/brightness/set"    {:post set-brightness-handler}
   "/lights/temperature/change" {:post change-temperature-handler}
   "/lights/temperature/set"    {:post set-temperature-handler}})

(defn handler [request]
  (if-let [route (get routes (:uri request))]
    (if-let [method-handler (get route (:request-method request))]
      (method-handler request)
      {:status 405 :body "Method Not Allowed"})
    {:status 404 :body "Not Found"}))

;;; Server Start

(defn start-server [port]
  (try
    (update-light-state!)
    (go
      (while true
        (async/<! (async/timeout 60000))
        (update-light-state!)))
    (server/run-server handler {:port port})
    (println (str "Server started on port " port))
    (Thread/sleep Long/MAX_VALUE) ; Keep the server running
  (catch Exception e
    (println "Error starting server:" (.getMessage e)))))

;;; Client Mode

(defn print-help []
  (println "Usage: script [options]")
  (println "")
  (println "Options:")
  (doseq [[opt long desc] cli-options]
    (println (format "  %-25s %s" (str opt ", " long) desc))))

(defn client-mode [options]
  (when (:toggle options) (toggle-light))
  (when (:brightness options) (change-brightness (:brightness options)))
  (when (:set-brightness options) (set-brightness (:set-brightness options)))
  (when (:color-temp options) (change-temperature (:color-temp options)))
  (when (:set-temperature options) (set-temperature (:set-temperature options))))

;;; Main Function

(defn -main [& args]
  (let [{:keys [options]} (parse-opts args cli-options)]
    (cond
      (:help options) (print-help)
      (:server options) (start-server (:port options))
      (empty? options) (print-help) ; Default to help if no options are provided
      :else (client-mode options))))

(when (= *file* (System/getProperty "babashka.file"))
  (apply -main *command-line-args*))
