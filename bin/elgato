#!/usr/bin/env bb

(require '[babashka.http-client :as http]
         '[cheshire.core :as json]
         '[clojure.tools.cli :refer [parse-opts]]
         '[org.httpkit.server :as server]
         '[clojure.core.async :as async :refer [go]]
         '[clojure.string :as string])

(def url "http://169.254.89.246:9123/elgato/lights")
(def timeout-ms 3000) ; 3 second timeout for HTTP requests

(def light-state (atom nil))

(defn kelvin->mired [k]
  (int (/ 1000000.0 k)))

(defn mired->kelvin [m]
  (int (/ 1000000.0 m)))

(def cli-options
  [["-t" "--toggle" "Toggle light on/off (client mode)"]
   ["-b" "--brightness VALUE" "Change brightness by VALUE (delta) (client mode)" :parse-fn #(Integer/parseInt %)]
   ["-s" "--set-brightness VALUE" "Set absolute brightness (client mode)" :parse-fn #(Integer/parseInt %)]
   ["-c" "--color-temp VALUE" "Change color temperature by VALUE (delta) (client mode)" :parse-fn #(Integer/parseInt %)]
   ["-T" "--set-temperature VALUE" "Set absolute color temperature (2900-7000 Kelvin) (client mode)" :parse-fn #(Integer/parseInt %)]
   ["-S" "--server" "Run in server mode"]
   ["-p" "--port VALUE" "Port to run the server on" :default 3000 :parse-fn #(Integer/parseInt %)]
   ["-i" "--ip-address VALUE" "IP address of the Elgato light (overrides default)"]
   ["-h" "--help" "Show help message"]])

;;; Core Light Functions

(defn fetch-lights
  "Fetch current light state directly from API"
  []
  (try
    (let [response (http/get url {:timeout timeout-ms})
          body (json/parse-string (:body response) true)
          lights (:lights body)]
      (first lights))
    (catch java.net.SocketTimeoutException e
      (println "Error: Timeout connecting to Elgato light. Please check IP address and connectivity.")
      (System/exit 1))
    (catch java.net.UnknownHostException e
      (println "Error: Cannot resolve host address. Please check the IP address.")
      (System/exit 1))
    (catch java.net.ConnectException e
      (println "Error: Connection refused. The Elgato light is not responding at the specified address.")
      (System/exit 1))
    (catch Exception e
      (println "Error fetching lights:" (.getMessage e))
      nil)))

(defn update-light-state!
  "Update in-memory light state from API"
  []
  (if-let [light (fetch-lights)]
    (do
      (swap! light-state (constantly light))
      true)
    (do
      (println "Error updating light state")
      false)))

(defn get-light-state
  "Get light state from either in-memory cache or fresh API fetch"
  [use-cached?]
  (if use-cached?
    @light-state
    (fetch-lights)))

(defn apply-light-command
  "Send command to the light and optionally update local state"
  [command use-cached?]
  (let [payload (json/generate-string {"numberOfLights" 1
                                       "lights" [command]})]
    (try
      (http/put url {:body payload
                     :headers {"Content-Type" "application/json"}
                     :timeout timeout-ms})
      (when use-cached?
        (doseq [[k v] command]
          (swap! light-state assoc k v)))
      true
      (catch java.net.SocketTimeoutException e
        (println "Error: Timeout connecting to Elgato light. Please check IP address and connectivity.")
        (System/exit 1))
      (catch java.net.UnknownHostException e
        (println "Error: Cannot resolve host address. Please check the IP address.")
        (System/exit 1))
      (catch java.net.ConnectException e
        (println "Error: Connection refused. The Elgato light is not responding at the specified address.")
        (System/exit 1))
      (catch Exception e
        (println "Error applying light command:" (.getMessage e))
        false))))

;; Unified control functions that work for both client and server mode

(defn control-light-toggle
  "Toggle light on/off - works for both client and server mode"
  [use-cached?]
  (if-let [light (get-light-state use-cached?)]
    (let [current-state (:on light)
          new-state (if (= current-state 1) 0 1)]
      (if (apply-light-command {"on" new-state} use-cached?)
        (println (str "Light toggled " (if (= new-state 1) "on" "off")))
        (println "Failed to toggle light")))
    (println "Failed to get light state")))

(defn control-light-brightness-change
  "Change brightness by delta amount - works for both client and server mode"
  [delta use-cached?]
  (if-let [light (get-light-state use-cached?)]
    (let [current-brightness (:brightness light)
          new-brightness (max 0 (min 100 (+ current-brightness delta)))]
      (if (apply-light-command {"brightness" new-brightness} use-cached?)
        (println (str "Brightness changed to " new-brightness))
        (println "Failed to change brightness")))
    (println "Failed to get light state")))

(defn control-light-brightness-set
  "Set absolute brightness - works for both client and server mode"
  [value use-cached?]
  (if value
    (let [new-brightness (max 0 (min 100 value))]
      (if (apply-light-command {"brightness" new-brightness} use-cached?)
        (println (str "Brightness set to " new-brightness))
        (println "Failed to set brightness")))
    (println "Invalid brightness value")))

(defn control-light-temperature-change
  "Change color temperature by delta - works for both client and server mode"
  [delta use-cached?]
  (if-let [light (get-light-state use-cached?)]
    (let [current-temperature (:temperature light)
          new-temperature (max 143 (min 344 (+ current-temperature delta)))]
      (if (apply-light-command {"temperature" new-temperature} use-cached?)
        (println (str "Temperature changed to " new-temperature " mired (" (mired->kelvin new-temperature) "K)"))
        (println "Failed to change temperature")))
    (println "Failed to get light state")))

(defn control-light-temperature-set
  "Set absolute color temperature in Kelvin - works for both client and server mode"
  [kelvin-value use-cached?]
  (if kelvin-value
    (let [clamped-kelvin (max 2900 (min 7000 kelvin-value))
          mired-value (kelvin->mired clamped-kelvin)]
      (if (apply-light-command {"temperature" mired-value} use-cached?)
        (println (str "Temperature set to " clamped-kelvin "K (" mired-value " mired)"))
        (println "Failed to set temperature")))
    (println "Invalid temperature value")))

;;; Parameter Parsing

(defn parse-query-param
  "Parse a query parameter value from a query string"
  [query-string param-name]
  (try
    (if query-string
      (let [param-pair (first (filter #(string/starts-with? % (str param-name "="))
                                      (string/split query-string #"&")))
            param-str (when param-pair (second (string/split param-pair #"=")))]
        (if param-str
          (Integer/parseInt param-str)
          nil))
      nil)
    (catch Exception e
      (println "Error parsing query parameter:" (.getMessage e))
      nil)))

;;; HTTP Handlers

(defn get-light-handler [request]
  {:status  200
   :headers {"Content-Type" "application/json"}
   :body    (json/generate-string @light-state)})

(defn toggle-light-handler [request]
  (control-light-toggle true)
  {:status 200 :body "Toggled"})

(defn change-brightness-handler [request]
  (if-let [delta (parse-query-param (:query-string request) "delta")]
    (do
      (control-light-brightness-change delta true)
      {:status 200 :body (str "Brightness changed by " delta)})
    {:status 400 :body "Missing or invalid delta parameter"}))

(defn set-brightness-handler [request]
  (if-let [value (parse-query-param (:query-string request) "value")]
    (do
      (control-light-brightness-set value true)
      {:status 200 :body (str "Brightness set to " value)})
    {:status 400 :body "Missing or invalid value parameter"}))

(defn change-temperature-handler [request]
  (if-let [delta (parse-query-param (:query-string request) "delta")]
    (do
      (control-light-temperature-change delta true)
      {:status 200 :body (str "Temperature changed by " delta)})
    {:status 400 :body "Missing or invalid delta parameter"}))

(defn set-temperature-handler [request]
  (if-let [value (parse-query-param (:query-string request) "value")]
    (do
      (control-light-temperature-set value true)
      {:status 200 :body (str "Temperature set to " value)})
    {:status 400 :body "Missing or invalid value parameter"}))

;;; Routing

(def routes
  {"/lights"           {:get get-light-handler}
   "/lights/toggle"    {:post toggle-light-handler}
   "/lights/brightness/change" {:post change-brightness-handler}
   "/lights/brightness/set"    {:post set-brightness-handler}
   "/lights/temperature/change" {:post change-temperature-handler}
   "/lights/temperature/set"    {:post set-temperature-handler}})

(defn handler [request]
  (if-let [route (get routes (:uri request))]
    (if-let [method-handler (get route (:request-method request))]
      (method-handler request)
      {:status 405 :body "Method Not Allowed"})
    {:status 404 :body "Not Found"}))

;;; Server Start

(defn start-server
  "Start the HTTP server for controlling lights"
  [port]
  (try
    (println "Connecting to Elgato light at" url "...")
    (if (update-light-state!)
      (do
        (println "Connection successful!")
        (go
          (while true
            (async/<! (async/timeout 60000))
            (update-light-state!)))
        (server/run-server handler {:port port})
        (println (str "Server started on port " port))
        (Thread/sleep Long/MAX_VALUE)) ; Keep the server running
      (do
        (println "Failed to connect to Elgato light. Server not started.")
        (System/exit 1)))
    (catch Exception e
      (println "Error starting server:" (.getMessage e))
      (System/exit 1))))

;;; Client Mode

(defn print-help
  "Display help information about available CLI options"
  []
  (println "Usage: script [options]")
  (println "")
  (println "Options:")
  (doseq [[opt long desc] cli-options]
    (println (format "  %-25s %s" (str opt ", " long) desc)))
  (println "")
  (println (format "Current Elgato light IP: %s" (second (re-find #"http://([^:]+)" url)))))

(defn client-mode
  "Run in client mode to execute light control actions based on CLI options"
  [options]
  (when (:toggle options) (control-light-toggle false))
  (when (:brightness options) (control-light-brightness-change (:brightness options) false))
  (when (:set-brightness options) (control-light-brightness-set (:set-brightness options) false))
  (when (:color-temp options) (control-light-temperature-change (:color-temp options) false))
  (when (:set-temperature options) (control-light-temperature-set (:set-temperature options) false)))

;;; Main Function

(defn -main
  "Main entry point for the application"
  [& args]
  (let [{:keys [options]} (parse-opts args cli-options)]
    ;; Override the URL if IP address is provided
    (when (:ip-address options)
      (alter-var-root #'url (constantly (str "http://" (:ip-address options) ":9123/elgato/lights"))))

    (cond
      (:help options) (print-help)
      (:server options) (start-server (:port options))
      (empty? options) (print-help) ; Default to help if no options are provided
      :else (client-mode options))))

(when (= *file* (System/getProperty "babashka.file"))
  (apply -main *command-line-args*))
