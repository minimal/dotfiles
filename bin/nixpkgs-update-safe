#!/usr/bin/env bash
#
# nixpkgs-update-safe - Safely update Nix flake inputs with automatic rollback
#
# This script updates nixpkgs and home-manager inputs, applies the changes with 
# home-manager switch, and commits the result with appropriate date information.
# If any step fails, it automatically rolls back the flake.lock to its original state.
#
# Features:
# - Checks for uncommitted changes before starting
# - Creates backup and rolls back on failure
# - Detects which inputs actually changed (nixpkgs, home-manager, or both)
# - Fetches real commit dates from GitHub for accurate commit messages
# - Skips update if no changes are detected
# - Handles nixpkgs node indirection in flake.lock
# - Maintains skip list for problematic nixpkgs commits
# - Option to update only nixpkgs (skip home-manager)
#
# Usage:
#   ./bin/nixpkgs-update-safe              # Update both nixpkgs and home-manager
#   ./bin/nixpkgs-update-safe --nixpkgs-only  # Update only nixpkgs
#   just nix-update-safe
#
# Requirements:
# - git repository with clean flake.lock
# - jq, curl, just commands available
# - Internet access for GitHub API calls
#

set -euo pipefail

# Skip list file for problematic nixpkgs commits
SKIP_LIST_FILE=".nix-skip-commits"

# Parse command line arguments
NIXPKGS_ONLY=false
if [[ "${1:-}" == "--nixpkgs-only" ]]; then
    NIXPKGS_ONLY=true
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository"
    exit 1
fi

# Check if flake.lock exists
if [[ ! -f flake.lock ]]; then
    print_error "flake.lock not found in current directory"
    exit 1
fi

# Check if flake.lock is dirty (has uncommitted changes)
if ! git diff --quiet flake.lock 2>/dev/null; then
    print_error "flake.lock has uncommitted changes. Please commit or stash them first."
    exit 1
fi

# Check if flake.lock is staged
if git diff --cached --quiet flake.lock 2>/dev/null; then
    : # flake.lock is not staged, which is what we want
else
    print_error "flake.lock is staged. Please unstage it first."
    exit 1
fi

# Check if just command is available
if ! command -v just &> /dev/null; then
    print_error "just command not found. Please install justfile."
    exit 1
fi

print_status "Starting safe Nix flake update..."

# Backup current flake.lock
BACKUP_FILE="flake.lock.backup.$(date +%s)"
cp flake.lock "$BACKUP_FILE"
print_status "Created backup: $BACKUP_FILE"

# Initialize skip list if it doesn't exist
touch "$SKIP_LIST_FILE"

# Function to rollback on failure
rollback() {
    print_warning "Rolling back flake.lock..."
    
    # Add problematic nixpkgs commit to skip list if it exists
    if [[ -n "${NEW_NIXPKGS_REV:-}" && "$NEW_NIXPKGS_REV" != "null" && "$NEW_NIXPKGS_REV" != "" ]]; then
        if ! grep -q "^$NEW_NIXPKGS_REV$" "$SKIP_LIST_FILE" 2>/dev/null; then
            echo "$NEW_NIXPKGS_REV" >> "$SKIP_LIST_FILE"
            print_warning "Added problematic nixpkgs commit to skip list: $NEW_NIXPKGS_REV"
        fi
    fi
    
    cp "$BACKUP_FILE" flake.lock
    
    print_warning "Running hm-switch to restore previous configuration..."
    if just hm-switch; then
        print_status "Successfully restored previous configuration"
    else
        print_error "Failed to restore previous configuration with hm-switch"
        print_error "You may need to manually run 'just hm-switch' to fix your system"
    fi
    
    rm -f "$BACKUP_FILE"
    print_status "Rollback completed"
}

# Set trap to rollback on script failure
trap 'rollback; exit 1' ERR

# Function to resolve nixpkgs node (handles indirection)
get_nixpkgs_rev() {
    local file=$1
    local nixpkgs_target=$(jq -r '.nodes.root.inputs.nixpkgs // "nixpkgs"' "$file")
    jq -r ".nodes.\"$nixpkgs_target\".locked.rev // empty" "$file"
}

# Get current revisions before update
OLD_NIXPKGS_REV=$(get_nixpkgs_rev "$BACKUP_FILE")
if [[ "$NIXPKGS_ONLY" == true ]]; then
    OLD_HM_REV=""
else
    OLD_HM_REV=$(jq -r '.nodes."home-manager".locked.rev // empty' "$BACKUP_FILE")
fi

# Update the flake
if [[ "$NIXPKGS_ONLY" == true ]]; then
    print_status "Running nixpkgs-only update..."
    nix flake update nixpkgs
else
    print_status "Running nixpkgs-update-flake..."
    just nixpkgs-update-flake
fi

# Check if flake.lock actually changed
if git diff --quiet flake.lock 2>/dev/null; then
    print_status "flake.lock unchanged, nothing to do"
    rm -f "$BACKUP_FILE"
    exit 0
fi

print_status "flake.lock changed, proceeding with checks..."

# Get new revisions after update
NEW_NIXPKGS_REV=$(get_nixpkgs_rev flake.lock)
if [[ "$NIXPKGS_ONLY" == true ]]; then
    NEW_HM_REV=""
else
    NEW_HM_REV=$(jq -r '.nodes."home-manager".locked.rev // empty' flake.lock)
fi

# Check if the new nixpkgs commit is in the skip list before proceeding
if [[ -n "$NEW_NIXPKGS_REV" && "$NEW_NIXPKGS_REV" != "null" && "$NEW_NIXPKGS_REV" != "" ]]; then
    if grep -q "^$NEW_NIXPKGS_REV$" "$SKIP_LIST_FILE" 2>/dev/null; then
        print_warning "Nixpkgs commit $NEW_NIXPKGS_REV is in skip list (known problematic)"
        print_warning "Restoring previous flake.lock and skipping this update"
        cp "$BACKUP_FILE" flake.lock
        rm -f "$BACKUP_FILE"
        print_warning "Remove commit from $SKIP_LIST_FILE to retry."
        exit 0
    fi
fi

# Try home-manager switch
print_status "Running hm-switch..."
if just hm-switch; then
    print_status "hm-switch succeeded"
else
    print_error "hm-switch failed"
    rollback
    exit 1
fi


# Determine what changed
NIXPKGS_CHANGED=0
HM_CHANGED=0

if [[ "$OLD_NIXPKGS_REV" != "$NEW_NIXPKGS_REV" ]]; then
    NIXPKGS_CHANGED=1
    print_status "Nixpkgs updated: $OLD_NIXPKGS_REV -> $NEW_NIXPKGS_REV"
fi

if [[ "$NIXPKGS_ONLY" != true && "$OLD_HM_REV" != "$NEW_HM_REV" ]]; then
    HM_CHANGED=1
    print_status "Home-manager updated: $OLD_HM_REV -> $NEW_HM_REV"
fi

# Function to get commit date from GitHub
get_commit_date() {
    local repo=$1
    local rev=$2
    local date=$(curl -s "https://api.github.com/repos/$repo/commits/$rev" | jq -r '.commit.committer.date')
    if [[ "$date" == "null" || -z "$date" ]]; then
        echo ""
    else
        echo "$date"
    fi
}

# Get appropriate commit date and message
if [[ $NIXPKGS_CHANGED -eq 1 && $HM_CHANGED -eq 1 ]]; then
    print_status "Both nixpkgs and home-manager changed, fetching dates..."
    NIXPKGS_DATE=$(get_commit_date "NixOS/nixpkgs" "$NEW_NIXPKGS_REV")
    HM_DATE=$(get_commit_date "nix-community/home-manager" "$NEW_HM_REV")
    
    if [[ -n "$NIXPKGS_DATE" && -n "$HM_DATE" ]]; then
        NIXPKGS_FORMATTED=$(date -d "$NIXPKGS_DATE" +"%Y-%m-%d" 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$NIXPKGS_DATE" +"%Y-%m-%d" 2>/dev/null || date +"%Y-%m-%d")
        HM_FORMATTED=$(date -d "$HM_DATE" +"%Y-%m-%d" 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$HM_DATE" +"%Y-%m-%d" 2>/dev/null || date +"%Y-%m-%d")
        COMMIT_MSG="nix: update nixpkgs & home-manager ($NIXPKGS_FORMATTED, $HM_FORMATTED)"
    else
        CURRENT_DATE=$(date +"%Y-%m-%d")
        COMMIT_MSG="nix: update nixpkgs & home-manager ($CURRENT_DATE)"
    fi
elif [[ $NIXPKGS_CHANGED -eq 1 ]]; then
    print_status "Only nixpkgs changed, fetching date..."
    NIXPKGS_DATE=$(get_commit_date "NixOS/nixpkgs" "$NEW_NIXPKGS_REV")
    
    if [[ -n "$NIXPKGS_DATE" ]]; then
        FORMATTED_DATE=$(date -d "$NIXPKGS_DATE" +"%Y-%m-%d" 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$NIXPKGS_DATE" +"%Y-%m-%d" 2>/dev/null || date +"%Y-%m-%d")
        COMMIT_MSG="nix: update nixpkgs ($FORMATTED_DATE)"
    else
        CURRENT_DATE=$(date +"%Y-%m-%d")
        COMMIT_MSG="nix: update nixpkgs ($CURRENT_DATE)"
    fi
elif [[ $HM_CHANGED -eq 1 ]]; then
    print_status "Only home-manager changed, fetching date..."
    HM_DATE=$(get_commit_date "nix-community/home-manager" "$NEW_HM_REV")
    
    if [[ -n "$HM_DATE" ]]; then
        FORMATTED_DATE=$(date -d "$HM_DATE" +"%Y-%m-%d" 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$HM_DATE" +"%Y-%m-%d" 2>/dev/null || date +"%Y-%m-%d")
        COMMIT_MSG="nix: update home-manager ($FORMATTED_DATE)"
    else
        CURRENT_DATE=$(date +"%Y-%m-%d")
        COMMIT_MSG="nix: update home-manager ($CURRENT_DATE)"
    fi
else
    print_status "Other flake inputs changed"
    CURRENT_DATE=$(date +"%Y-%m-%d")
    COMMIT_MSG="nix: update flake.lock ($CURRENT_DATE)"
fi

print_status "Commit message: $COMMIT_MSG"

# Stage and commit flake.lock
git add flake.lock
git commit -m "$COMMIT_MSG"

# Clean up backup
rm -f "$BACKUP_FILE"

print_status "âœ… Successfully updated and committed flake.lock"
print_status "Commit: $(git rev-parse --short HEAD)"
